1、进程、线程：
进程，是系统进行资源分配和调度的独立单位；
线程，是进程中独立运行的子任务。

2、为什么使用多线程？
使用多线程，可以通过使用异步的方式，最大限度的理用CPU的空闲时间来处理其他的任务。
由于CPU在这些任务之间，通过不断的切换时间切片，使得在同一时间内运行不同种类的任务。

3、使用多线程的方式：
1）集成Thread
2）实现Runnable
3）Callable和Future实现带返回值的线程
4）采用线程池

4、线程之间数据共享：
1）通过对new共同的一个Thread或Runnable接口，处理。
2）设置需要共享的变量为全局变量。
3）生成外部共享变量对象，逐一传递到各个线程中。

5、理解Thread.currentThread().getName() 和 this.getName()的区别：
前者指当前代码段，正在被哪个线程执行
后者指当前代码属于哪个线程

6、isAlive：
判断线程是否处于活动状态（线程已经启动且尚未终止）

7、停止线程：
1）使用出标志，使得退线程正常退出
2）使用stop方法，强制退出
3）使用interrupt方法中断线程
4）抛异常进行终端

8、isInterrupt() 和 interrupted() 方法的区别：
都是测试当前线程是否已经中断。后者会清除中断状态(重新设置为false)，而前者不会。

9、suspend和resume：
暂停线程和重新启动线程。

10、yield()：
放弃当前的CPU资源，让给其他的任务。但放弃时间不确定，有可能刚放弃，就又重新获得。

11、优先级priority：
设置范围：
MIN_PRIORITY = 1;
NORM_PRIORITY = 5;
MAX_PRIORITY = 10;

线程优先级有继承性：A线程启动B线程，再不设置线程级别的情况下，B线程的优先级与A保持一致。
线程优先级有规则性：高优先级的线程，大部分情况下，比优先级低的线程先执行完成。
线程优先级有随机性：高优先级的线程，不一定比低优先级的线程先执行完成。

12、守护线程和普通线程：
守护线程是一种特殊的线程，当进程种不存在非守护线程时，守护线程则自动销毁。典型的守护线程是垃圾回收线程。
普通的线程可以通过setDaemon(true)来设置为守护线程。
