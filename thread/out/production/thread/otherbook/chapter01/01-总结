1、上下文切换：
多线程的执行，可以通过CPU给线程分配时间片，来实现这个机制，由于切换的比较快，
并且时间片比较短，所以感觉像是再一起执行。

通过时间片分配算法，来实现多线程的情况下，当从一个任务切换到下一个任务之间，
会保存一个任务的状态，以便下次切换回来后，可以加载这个任务的状态。

从保存到再次加载的过程，就是上下文切换。

2、多线程一定快吗？
答案是不一定的。因为再多线程之间，需要不断的进行上下文切换，也是需要浪费资源的。

3、避免上下文切换浪费资源的方式：
a、无锁并发编程：不加锁进行并发操作。譬如把数据按照hashcode进行分段，不同的线程处理不同的数据。
b、CAS算法：简单来说就是通过不断的循环区修改目标，知道修改完成则退出循环。不需要加锁。
c、使用最少线程：避免创建不必要的线程。譬如较少的数据，通过创建很多个线程来实现。
d、协程：一个线程中，执行多个任务的操作和切换。
    目前了解到可以在java程序中应用的协程组件有以下几种：
    javaflow：http://commons.apache.org/sandbox/commons-javaflow/
    Coroutines：https://github.com/offbynull/coroutines
    Kilim：https://github.com/kilim/kilim
