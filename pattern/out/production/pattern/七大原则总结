一、七大设计原则
1、开闭原则：
对扩展开放，对修改关闭。强调的是通过抽象构建框架，对实现扩展细节，并且不修改原有代码。
例如：
A、学多线程的时候，有两个实例，一个是线程安全的对象，一个是线程不安全的对象，功能一致。
再同一个线程中作成员变量，在不修改此线程代码的时候，需要给两个类，提出来一个抽象接口。
B、工厂方法符合开闭原则、简单工厂和抽象工厂不符合开闭原则。

优点：提高代码的可维护性和复用性。

2、依赖倒置原则：
设计代码结构时，高层模块不依赖于低层模块，应该依赖于底层模块的抽象。
并且，抽象不依赖于细节，细节依赖于抽象。
例如：
学生学习Java课程。把课程作为学生的成员变量。这个时候，成员变量的对象不应该为Java课程。
而应该是该课程的抽象接口。因为如果在增加课程的话，就会需要再次修改学生类的代码。

优点：解耦合。增强系统的可维护性。降低修改程序造成的风险。

3、单一指责原则：
修改类变更的原因，不超过一个。如果一个类负责两个职责，那么其中一个发生需求变更，有可能会导致另一个逻辑功能发生故障。
例如：
学生学习课程。如果学生只有一个study方法。这个方法的逻辑中，即处理java课程还处理python课程的逻辑。

优点：提高代码的可读性和和可维护性。降低修改程序造成的风险。


4、接口隔离原则：
使用多个专用接口，而不使用一个统一的接口。客户端不需要依赖于他不需要的接口。
例如：
各类动物的不同行为。大雁、狗和鸭子，需要定义三种行为：飞、吃、游泳。
这种背景下应该定义三个接口，而不使定义一个统一的动物接口。这样就可以保证，不存在依赖不需要的接口。

优点：使得类有很好的可读性和可维护性。


5、德米特原则（最少知道原则）：
一个对象应该对其他的对象保持最少的了解，尽量降低类与类之间的耦合。
出现在成员变量、方法入参和出参的类，可以称之为成员朋友类。出现在方法内部的类不属于朋友类。
与朋友类多沟通，与非朋友类尽量减少沟通。
例如：
任务委派。老板把活分给项目经理，项目经理分活给员工。
这个过程中，老板委派的方法中，应该减少或避免出现员工类。

优点：减低耦合。

6、里氏替换原则：
子类可以扩展父类的功能，尽量不能修改父类原有的功能（不重写或重载）。
使用父类的地方，可以透明的使用其子类进行替换，而程序逻辑不变
例如：
双十一价格8折。正常价格类（父类）和双十一价格类（子类），子类不应该重写父类的getPrice。
因为如重写，则子类对象替换父类对象时，程序逻辑发生了变化。应该子类扩展一个新的方法。

优点：避免继承混乱。使程序做到很好的兼容性，提高程序的可维护性。

7、合成复用原则（非六大原则之一）：
为了达到代码复用的目的，尽量通过组合或聚合的方式，而不是用继承。
例如：
学生学习课程。使用的是类之间的聚合，而不是学生类继承课程类。

优点：可以使得类与类之间降低耦合，并且更加灵活。