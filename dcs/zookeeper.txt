1、为什么要用微服务？
    a、每个微服务是独立并且相对较小的，有单独的团队负责开发，开发效率较高，更方便维护。
    b、每个微服务都是独立部署的，可以快速迭代部署，并且可以部署到不同的硬件环境和使用不同的数据库。
    c、每个微服务可以部署多个实例，提高吞吐量的同时，也能更好的容错。
    d、更容易进行扩展，增加新的微服务的情况下，不需要修改其他的微服务等

2、zookeeper：分布式协调服务，做服务治理。
    解决的问题：
        a、协议地址的维护
        b、负载均衡机制
        c、服务动态上下线感知

    功能：
        a、命名服务
        b、配置中心，通过数据发布与订阅
        c、集群管理，实现负载均衡（知道机器的状态，选举master）
        d、分布式锁
        e、队列管理

    角色：
        a、leader：处理事务请求
        b、follower：查，可以参与选举
        c、observer：监视，可以同步leader的数据，不参与选举



3、zookeeper的树形结构：
    a、同级节点的唯一性
    b、临时节点和持久化节点（客户端创建的临时节点，会话断开后，会自动删除）
    c、有序节点特性
    d、临时节点下，不能存在子节点

4、zookeeper的配置：
    a、tickTime->最小时间单位
    b、initTime->最大的初始化时间，10代表十个时间单位
    c、syncLimit->发起请求和获得响应的时间

5、zookeeper处理请求的方式，即如何保证个节点的数据一致性：2PC
    当follower接收到事务处理，会转发到leader节点。有leader节点，给各个follower发送事务提交请求，当所有的节点都返回可以提交请求时，leader会发送提交命令给各个节点。当超过半数的节点返回成功时，即将返回给客户端请求处理完成。

6、ZAB协议：
    支持崩溃恢复的原子广播协议，主要用于实现数据的一致性。

    设计思想：zxid是64位的数据，低32位标识消息计数器（自增），高32位位epoch编号。每处理一个消息，消息计数器自增。每产生一个新的leader，epoch+1。

    a、崩溃恢复
        1）当leader失去了过半的follower节点的联系
        2）当leader服务挂了
        集群进入恢复阶段：
            a、已经被处理的消息不能丢失
            b、被丢弃的消息不能再次出现

    b、原子广播
