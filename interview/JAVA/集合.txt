1、数组和集合的区别：
数据的长度不可变，可以存储对象或基本数据类型。
集合的长度可变，但只能存储对象。

2、层次关系：
Collection接口：
有两个子接口List、Set。
    1）List 有序允许重复
        a、ArrayList
        b、LinkedList
        c、Vector
    2）Set 无序不允许重复
        a、HashSet
        b、TreeSet
        c、LinkedHashSet

Map接口：
与Collection接口是完全两个独立的接口，但都是属于集合的一部分。
Map存储的是key-value键值对，key不可以重复，值可重复。
包含：
1）HashMap
2）LinkedHashMap
3）TreeMap
4）HashTable

Iterator接口，所有的集合类，都实现了Iterator接口，用于遍历集合中的元素。
1）ListIterator是单独为list集合实现的一种遍历。相对于iterator来说，能够实现正向遍历和逆向遍历，并且除了能够remove方法以外，可以实现add和set操作。

3、List的实现类及对比：
    ArrayList原理：首先存储数据的，实际上就是一个数组。然后有三种初始化方式，一种是无参，则默认数组的长度是10个。一种是传递int，设置数组的长度。一种是传递collection，将数组的值elementData赋值
    扩容：增加数据判断当前数据的长度和需要的长度比较，如果小于，则是需要扩容，扩容1.5倍
    删除：就是数组右边的左移一位

    LinkedList原理：LinkedList的数据接口，是一个双向链表。对于数据的增加或删除比较方便，只要修改链表的指向就可以。对于查询的话，由于需要对整个链表进行筛选，需要从头往下找，所以相对ArrayList要慢。

    Vector原理：实现原理与ArrayList相同，但是Vector再关键的方法上加上了同步语句，因此是线程安全的。
    扩容：默认是扩容两倍。   

    之间的比较：
        1）ArrayList与LinkedList：
            a、首先数据结构不同，注定工作场景的不同
            b、get和set来说，ArrayList要优于LinkedList
            c、add和remove来说i，LinkedList要由于ArrayList
        2）ArrayList与Vector
            a、首先ArrayList的结构和实现原理基本上和Vector相同，但Vector是线程安全的，ArrayList是非线程安全的。
            b、ArrayList初始化，默认数据长度是0，当add操作后，数组扩容为10。Vector是初始化默认长度为10。
            c、扩容，ArrayList是扩容1.5倍，Vector是默认扩容2倍。

4、Map的实现类及对比：
    HashMap原理：
        1）存储结构：数组+单项链表的方式进行存储。其中数据的默认大小为16。
        2）哈希算法的作用：通过哈希算法（key的哈希code，高16位和低16位通过异或获得值）的结果和15做位与运算，获得数组的下标位置。
        3）请描述put的流程：
            a、通过哈希算法获得结果值
            b、判断数组是否为空，如果为空的话，则对数组进行初始化
            c、根据hash算法值，和15做与运算，获得数组的下标值，生成node节点，并判断该位置是否有元素。
            d、没有元素，则直接放到这个数组位置上。如果有元素，则需要判断key是否相同，相同则进行value指的替换，不相同则通过链表获得下一个节点，依然判断key是否相同，直到最后，再next指向该节点。这个过程中，如果链表的长度超过8，会把单向链表转化为二叉树。
            e、判断数组的容量大小，如果数组的占用长度，大于当前数据总大小的0.75倍，则进行2倍扩容。然后把节点移动到新的数组中。
        4）细节问题：
            a、为什么数组长度要为2的N次方？
                 取决于hash算法，为了更加分散（2的N次方-1 = 11111111111）
            b、链表如果移动的话，移动的位置：
                 只可能是原来的位置，或者是原来的位置+原数组的大小。
    
    LinkedHashMap原理：
        是继承了HashMap，使用HashMap的数据结构来存储数据，但是再HashMap的基础上维护了一个所有条目的双向连接，可以保持循序。

    TreeMap原理：
        实现原理是通过内部维护的红黑树来实现的，并且内部维护了比较器。通过比较器，来判断节点的顺序。

    HashTable原理：
        实现原理与HashMap相同，但是关键方法增加了锁关键字synchronized，所以是线程安全的。

5、Set的实现类及对比：
    HashSet原理：实际上内部实现是通过HashMap来实现的。