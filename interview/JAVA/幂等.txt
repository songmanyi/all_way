幂等概念：
一个操作，多次执行和一次执行的结果是一样的。

幂等性问题：
比如滴滴打车，点击支付，由于网络原因，一致没有返回成功。这时候再次点击支付。也应该只扣一次钱。

幂等性问题的解决办法：
1、增加ticketId，就是增加门票。门票对应一次支付是唯一的，并且只能使用一次。
操作步骤变为：
1）获得门票
2）根据门票进行支付
3）根据门票Id判断是否支付过了。如果支付成功，则返回结果。没有成功，支付，保存结果
4）返回结果

2、乐观锁：
比如增加一个字段version，更新数据时，需要用version进行判断数据是否有过变更。为了防止ABA的问题的话，也需要保证version是不断自增的。

3、防重表：
简单来说，根据订单的编号作为主键，每次订单过来，都向去重表中增加一条数据。第一次的话，能够插入数据成功，然后进行支付+更新订单的状态。后续同一条订单在支付的话，会往防重表中插入数据失败。则不需要再进行支付操作。防重表的方式，简单来说也是加锁。

4、分布式锁：
可以通过zookeeper或redis进行分布式锁的操作。订单来以后，先从redis中判断是否有订单key，如果没有则增加一个key，当支付完成以后，再把redis中的key删除掉。保证一个订单的支付过程，只有一个完成后，其他的才能继续进行。

5、支付缓存区：
通过一个快读的接单的缓冲管道，快速的获得所有的支付请求，然后去掉对同一订单的支付请求。通过异步任务处理管道中的数据。
优点是同步转异步，高吞吐。不足是不能及时的返回支付结果。