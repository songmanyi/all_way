工厂模式，主要分为三类：
简单工厂、工厂方法和抽象工厂三种。

简单工厂：
由工厂对象决定创建哪一类产品的实例。
适用于工厂类负责创建的对象较少的情况下，且客户端只需要负责传递参数，对于创建的逻辑并不关心。
缺点：
不符合开闭原则。可以通过类反射来解决这个问题。
场景：
Calendar.getInstance();
LoggerFactory.getLogger();


工厂方法：
由实例化工厂接口的对象来决定实例化哪类产品，产品的创建推荐到子类来实现，并且不关注产品的创建细节。
符合开闭原则，但是会导致类特别的多。


抽象工厂：
拥有产品族和产品等级。每个实现工厂接口的子类，都需要实现创建产品组的方法。

也不复合开闭原则，当产品等级结构增加时，会需要修改源码。

工厂方法可以理解为是只有一个产品等级结构的抽象工厂。